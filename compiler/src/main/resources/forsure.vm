package ${packageName};

// forsuredb-defined api imports
import com.forsuredb.api.ForSureInfoFactory;
import com.forsuredb.api.RecordContainer;

// user-defined model imports
#foreach($modelClassImport in $modelClassImports)
import ${modelClassImport};
import ${modelClassImport}Resolver;
import ${modelClassImport}Setter;
import ${modelClassImport}Finder;
#end
#foreach($joinClassImport in $joinClassImports)
import ${joinClassImport};
#end

/**
 * <p>
 *     The entry point into any querying of the database tables you defined by extending
 *     the {@link com.forsuredb.api.FSGetApi} interface. Common usage for getting data will
 *     include the following:
 *     <pre>
 *         {@code TableApiClass tableApi = ForSure.tableApiClass().getApi();
 *           Retriever retriever = ForSure.tableApiClass().find().byId(1).andFinally().get();
 *           if (retriever.moveToFirst()) {
 *               do {
 *                   long id = tableApi.id(retriever);
 *                   Date modified = tableApi.modified(retriever);
 *                   Date created = tableApi.created(retriever);
 *                   boolean deleted = tableApi.deleted(retriever);
 *                   // Any of the methods you added to your extension of FSGetApi
 *               } while (retriever.moveToNext())
 *           }
 *           retriever.close();
 *         }
 *     </pre>
 * </p>
 * <p>
 *     Common usage for inserting a new record into the table (where your extension of
 *     {@link com.forsuredb.api.FSGetApi} has methods aColumn and bColumn):
 *     <pre>
 *         {@code ForSure.tableApiClass().set().aColumn("A").bColumn("B").save();}
 *     </pre>
 * </p>
 * <p>
 *     Common usage for updating a record into the table (where your extension of
 *     {@link com.forsuredb.api.FSGetApi} has methods aColumn and bColumn):
 *     <pre>
 *         {@code SaveResult<${resultParameter}> result = ForSure.tableApiClass()
 *                   .find().byId(1).andFinally()
 *                   .set().aColumn("A").bColumn("B")
 *                   .save();}
 *     </pre>
 *     The above will perform the following SQL:</br>
 *     UPDATE table_class SET a_column = 'A', b_column = 'B' WHERE _id = '1';<br />
 *     Note that a_column and b_column would have to have been set in
 *     {@link com.forsuredb.annotation.FSColumn} annotations on the methods in order
 *     to name them a_column and b_column respectively.
 * </p>
 * <p>
 *     Common usage for flipping the deleted bit on a record:
 *     <pre>
 *         {@code SaveResult<${resultParameter}> result = ForSure.tableApiClass()
 *                   .find().byId(1).andFinally()
 *                   .softDelete();}
 *     </pre>
 *     The above will perform the following SQL:<br />
 *     UPDATE table_class SET deleted = 1 WHERE _id = '1';
 * </p>
 * <p>
 *     Common usage for permanently the deleting a record:
 *     <pre>
 *         {@code SaveResult<${resultParameter}> result = ForSure.tableApiClass()
 *                   .find().byId(1).andFinally()
 *                   .hardDelete();}
 *     </pre>
 *     The above will perform the following SQL:<br />
 *     DELETE FROM table_class WHERE _id = '1';<br />
 *     Note that this will trigger the {@link com.forsuredb.annotation.ForeignKey.ChangeAction}
 *     delete change action on any foreign key relationships.
 * </p>
 */
public class ForSure<U, R extends RecordContainer> {

    private static ForSure instance;

    private ForSureInfoFactory infoFactory;

    private ForSure(ForSureInfoFactory<U, R> infoFactory) {
        this.infoFactory = infoFactory;
    }

    public static <U, R extends RecordContainer> void init(ForSureInfoFactory<U, R> infoFactory) {
        if (instance == null) {
            instance = new ForSure<U, R>(infoFactory);
        }
    }
#foreach($tableResolverMethod in $tableResolverMethods)

    ${tableResolverMethod}
#end
#foreach($joinResolver in $joinResolvers)

    ${joinResolver}
#end

    private U resourceOf(String tableName) {
        return (U) infoFactory.tableResource(tableName);
    }
}