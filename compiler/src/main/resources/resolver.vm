package ${packageName};

import com.forsuredb.api.FSGetAdapter;
import com.forsuredb.api.FSSaveAdapter;
import com.forsuredb.api.FSQueryable;
import com.forsuredb.api.ForSureInfoFactory;
import com.forsuredb.api.RecordContainer;
import com.forsuredb.api.Resolver;
import com.forsuredb.api.Retriever;
import com.forsuredb.api.FSSelection;

public class ${className} implements Resolver<${resultParameter}, ${getApiClass}, ${setApiClass}, ${finderClass}> {

    public static final String TABLE_NAME = "${tableName}";

    private final ${resultParameter} resource;
    private final ForSureInfoFactory infoFactory;

    private ${getApiClass} getApi;
    private ${finderClass} finder;

    public ${className}(${resultParameter} resource, ForSureInfoFactory infoFactory) {
        this.resource = resource;
        this.infoFactory = infoFactory;
    }

    @Override
    public ${getApiClass} getApi() {
        if (getApi == null) {
            getApi = FSGetAdapter.create(${getApiClass}.class);
        }
        return getApi;
    }

    @Override
    public Retriever get() {
        FSSelection selection = finder == null ? new FSSelection.SelectAll() : finder.selection();
        finder = null;  // <-- When a finder's selection method is called, it must be nullified
        return infoFactory.createQueryable(resource).query(null, selection, null);
    }

    @Override
    public ${setApiClass} set() {
        FSQueryable queryable = infoFactory.createQueryable(resource);
        RecordContainer recordContainer = infoFactory.createRecordContainer();
        FSSelection selection = finder == null ? null : finder.selection();
        finder = null;  // <-- When a finder's selection method is called, it must be nullified
        return FSSaveAdapter.create(queryable, selection, recordContainer, ${setApiClass}.class);
    }

    @Override
    public ${finderClass} find() {
        finder = new ${finderClass}(this);
        return finder;
    }
}