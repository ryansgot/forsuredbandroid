package ${packageName};

import com.forsuredb.api.FSGetAdapter;
import com.forsuredb.api.FSSaveAdapter;
import com.forsuredb.api.FSQueryable;
import com.forsuredb.api.ForSureInfoFactory;
import com.forsuredb.api.RecordContainer;
import com.forsuredb.api.Resolver;
import com.forsuredb.api.Retriever;
import com.forsuredb.api.FSSelection;
import com.forsuredb.api.FSProjection;
import com.forsuredb.api.FSJoin;

import java.util.List;
import java.util.ArrayList;

public class ${className} implements Resolver<${resultParameter}, ${getApiClass}, ${setApiClass}, ${finderClass}> {

    public static final String TABLE_NAME = "${tableName}";
    public static final String[] columns = new String[] {
#foreach($column in $columns)
            "$column",
#end
            };
    public static final FSProjection PROJECTION = new FSProjection() {
        @Override
        public String tableName() {
            return TABLE_NAME;
        }
        @Override
        public String[] columns() {
            return columns;
        }
    };

    private final ForSureInfoFactory infoFactory;
    private final List<FSJoin> joins = new ArrayList<>();
    private final List<FSProjection> projections = new ArrayList<>();
    private ${resultParameter} lookupResource;

    private ${getApiClass} getApi;
    private ${finderClass} finder;

    public ${className}(ForSureInfoFactory infoFactory) {
        this.infoFactory = infoFactory;
        lookupResource = tableLocator();
    }

    @Override
    public ${getApiClass} getApi() {
        if (getApi == null) {
            getApi = FSGetAdapter.createUnambiguous(${getApiClass}.class);
        }
        return getApi;
    }

    @Override
    public Retriever get() {
        try {
            return preserveQueryStateAndGet();
        } finally {
            finder = null;  // <-- When a finder's selection method is called, it must be nullified
            joins.clear();  // <-- the state of the joins must be empty at the start of each query
            projections.clear();    // <-- the state of the projections must be empty at the start of each query
            lookupResource = tableLocator();
        }
    }

    @Override
    public Retriever preserveQueryStateAndGet() {
        final FSSelection selection = finder == null ? new FSSelection.SelectAll() : finder.selection();
        final FSQueryable queryable = infoFactory.createQueryable(lookupResource);
        projections.add(PROJECTION);
        return joins.size() == 0 ? queryable.query(PROJECTION, selection, null)
                                 : queryable.query(joins, projections, selection, null);
    }

    @Override
    public ${setApiClass} set() {
        FSQueryable queryable = infoFactory.createQueryable(lookupResource);
        RecordContainer recordContainer = infoFactory.createRecordContainer();
        FSSelection selection = finder == null ? null : finder.selection();
        finder = null;  // <-- When a finder's selection method is called, it must be nullified
        return FSSaveAdapter.create(queryable, selection, recordContainer, ${setApiClass}.class);
    }

    @Override
    public ${finderClass} find() {
        finder = new ${finderClass}(this);
        return finder;
    }

    @Override
    public ${resultParameter} tableLocator() {
        return (${resultParameter}) infoFactory.tableResource(TABLE_NAME);
    }

    @Override
    public ${resultParameter} recordLocator(long id) {
        return (${resultParameter}) infoFactory.locatorFor(TABLE_NAME, id);
    }

    @Override
    public ${resultParameter} currentLocator() {
        return lookupResource;
    }
#foreach($joinMethodDefinition in $joinMethodDefinitions)

    $joinMethodDefinition
#end
}